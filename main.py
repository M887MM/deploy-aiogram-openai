from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.types import Update
from aiogram import Router
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import os
from dotenv import load_dotenv
from aiogram.enums import ChatAction
import asyncio
from openai import AsyncOpenAI
import httpx , openai
print("httpx version:", httpx.__version__)
print("openai version:", openai.__version__)

user_dialogs = {}
load_dotenv()

OPENAI_API_KEY = os.getenv("API_KEY")
openai.api_key = OPENAI_API_KEY


async def create_response(text: str):
    res = openai.chat.completions.create(
        model="gpt-5-nano-2025-08-07",
        messages=[{"role": "user" , "content": text}, { "role": "developer" , "content": "–¢—ã ‚Äî AI-–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∫–≤–∞—Ä—Ç–∏—Ä –∫–æ–º–ø–∞–Ω–∏–∏ Dreamland –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É. –í –Ω–∞—á–∞–ª–µ –æ–±—â–µ–Ω–∏—è —É—Ç–æ—á–Ω—è–π —É –∫–ª–∏–µ–Ω—Ç–∞ –µ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, –ø–ª–æ—â–∞–¥—å (–∫–≤.–º), –±—é–¥–∂–µ—Ç, —ç—Ç–∞–∂, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –ó–∞–ø–æ–º–∏–Ω–∞–π –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞. –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç ¬´–≤—Å—ë¬ª, ¬´–∏—â–∏¬ª, ¬´–Ω–∞–π–¥–∏¬ª –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–π –∏–∑ –±–∞–∑—ã —Ç–æ–ª—å–∫–æ —Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É—Å–ª–æ–≤–∏—è–º. –°–æ—Ö—Ä–∞–Ω—è–π ID –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–≥–µ–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏."}],
    )
    return res.choices[0].message.content

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Dreamland. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –∏—â–µ—Ç–µ? üè†")


@router.message()
async def handle_message(message: Message):
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞
    if user_id not in user_dialogs:
        user_dialogs[user_id] = []

    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç
    if message.contact:
        phone = message.contact.phone_number
        dialog_text = "\n".join(user_dialogs[user_id])

        text_for_manager = (
            f"üìû –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!\n"
            f"–ù–æ–º–µ—Ä: {phone}\n\n"
            f"–î–∏–∞–ª–æ–≥:\n{dialog_text}"
        )
        
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)

        await message.bot.send_message(GROUP_ID, text_for_manager)

        await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.")

        # –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        user_dialogs[user_id] = []
        return

    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é
    if message.text and message.text.startswith("+"):
        phone = message.text
        dialog_text = "\n".join(user_dialogs[user_id])

        text_for_manager = (
            f"üìû –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!\n"
            f"–ù–æ–º–µ—Ä: {phone}\n\n"
            f"–î–∏–∞–ª–æ–≥:\n{dialog_text}"
        )

        await message.bot.send_message(GROUP_ID, text_for_manager)
        user_dialogs[user_id] = []
        return

    # –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
    if message.text:
        user_dialogs[user_id].append(message.text)

        await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        await asyncio.sleep(1)

        try:
            response = await create_response(message.text)
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
bot = Bot(token=os.getenv('TOKEN'))
GROUP_ID = os.getenv('GROUP_ID')

dp = Dispatcher()
dp.include_router(router)
dp.bot_group_id = GROUP_ID

async def handle(request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return web.Response()

app = web.Application()
app.router.add_post("/webhook", handle)

async def on_startup(app):
    await bot.set_webhook(f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook")

app.on_startup.append(on_startup)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
